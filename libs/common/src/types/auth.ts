// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.4
//   protoc               v5.29.0
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface CreateUserRequest {
  email: string;
  password: string;
}

export interface Empty {
}

export interface Users {
  users: User[];
}

export interface GetUserRequest {
  id: string;
}

export interface UpdateUserRequest {
  id: string;
  contactInformation: ContactInformation | undefined;
}

export interface PaginationRequest {
  page: number;
  skip: number;
}

export interface User {
  id: string;
  email: string;
  password: string;
  active: boolean;
  contactInformation: ContactInformation | undefined;
  balance: number;
}

export interface ContactInformation {
  phone?: string | undefined;
  tlgId?: string | undefined;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface UserServiceClient {
  createUser(request: CreateUserRequest): Observable<User>;

  getUsers(request: Empty): Observable<Users>;

  getUser(request: GetUserRequest): Observable<User>;

  updateUser(request: UpdateUserRequest): Observable<User>;

  removeUser(request: GetUserRequest): Observable<User>;

  queryUsers(request: Observable<PaginationRequest>): Observable<Users>;
}

export interface UserServiceController {
  createUser(request: CreateUserRequest): Promise<User> | Observable<User> | User;

  getUsers(request: Empty): Promise<Users> | Observable<Users> | Users;

  getUser(request: GetUserRequest): Promise<User> | Observable<User> | User;

  updateUser(request: UpdateUserRequest): Promise<User> | Observable<User> | User;

  removeUser(request: GetUserRequest): Promise<User> | Observable<User> | User;

  queryUsers(request: Observable<PaginationRequest>): Observable<Users>;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "getUsers", "getUser", "updateUser", "removeUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["queryUsers"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
